from promptify.utils.file_utils import *
from promptify.utils.conversation_utils import *
from promptify.utils.data_utils import *

class ConversationLogger:
    
    def __init__(self, conversation_path: str, llm_parameters: Dict):
        
        """Create a logger for a conversation.

        Args:
            conversation_path: The path to the folder where conversations will be stored.
            model_name: The name of the language model used in the conversation.
            model_dict: A dictionary containing metadata about the model.
        """
        
        self.conversation_path = conversation_path
        self.conversation_folder, self.conversation_id = setup_folder(self.conversation_path)
        self.conversation_file = os.path.join(self.conversation_path, self.conversation_folder)
        
        model_dict = {key: value for key, value in llm_parameters.items() if is_string_or_digit(value)}
        self.conversation = get_conversation_schema(self.conversation_id, llm_parameters['model'], **llm_parameters)
        write_json(self.conversation_file, self.conversation, "history")

    def add_message(self, message: Dict[str, Any]):

        """Add a message to the conversation.
        Args:
            prompt: The prompt sent to the language model.
            response: The response generated by the language model.
            source: The source of the message ("user" or "model").
            metadata: Optional metadata about the message.
            **kwargs: Additional metadata to be added to the message.
        """

        self.conversation["messages"].append(message)
        write_json(self.conversation_file, self.conversation, "history")

    def __repr__(self):
        return f"ConversationLogger(conversation_id={self.conversation_id}, conversation_path={self.conversation_path})"
